#!/bin/bash
#set -x

# local params
HDR=fitshead_$$.out
FUNFILE=funcnts_$$.out
OPTS="-g"
BCSCALE=40

cleanup () {
  rm -f $HDR $FUNFILE
}

error () {
  echo "ERROR: $*" 1>&2
  cleanup
  exit 1
}

getpar () {
  egrep "$1 *=" | awk -F= '{print $2}' | awk -F/ '{print $1}' | sed "s/[' ]*\([^ ']*\)[ ']*/\1/" | tr [a-z] [A-Z] | head -1
}

# requires 1 arg (2 others are optional)
if [ $# -lt 1 ]; then
  error "$0 requires filename [sregion [bregion]]"
fi
FILENAME=`basename $1`

# look for funtools
hash funcnts 1>/dev/null 2>&1
if [ $? != 0 ]; then
  error "$0 requires funtools to be installed"
fi

# get header
funhead $1 > $HDR 2>/dev/null
if [ $? != 0 ]; then
  error "could not find header for $1"
fi

# get header params
TELESCOP=`getpar TELESCOP < $HDR`
INSTRUME=`getpar INSTRUME < $HDR`

# get telescope-specific options
case $TELESCOP in
    CHANDRA)
      # do we have a flux column?
      egrep "^TTYPE.*'FLUX *'" $HDR 2>&1 1>/dev/null
      if [ $? = 0 ]; then
        # yes
        HAVEFLUX=1
        # exposure is already taken into account in the FLUX determination
        OPTS="-v FLUX $OPTS"
        # raw units
        RAWUNITS="ergs/cm**2/sec"
      else
	EXPOSURE=`getpar EXPOSURE < $HDR`
        if [ x$EXPOSURE != x ]; then
	  # normalize by exposure
          OPTS="$OPTS -t EXPOSURE"
          # log the exposure value
          XTRA="exposure:\t$EXPOSURE"
          PERSEC="/sec"
        fi
        # raw units
        RAWUNITS="photons"
      fi
      # get counts in regions
      funcnts $OPTS "$1" "$2" "$3" > $FUNFILE
      RAWCNTS=`cat $FUNFILE | sed '1,/---- .*/d;/^$/,$d' | awk '{print $2}' | tr "\n" " "`
      # raw area
      RAWAREA=`cat $FUNFILE | sed '1,/---- .*/d;/^$/,$d' | awk '{print $6}' | tr "\n" " "`
      # normalized flux
      if [ x"$HAVEFLUX" = x1 ]; then
        # rawcnts and flux are the same
        FLUX="$RAWCNTS"
        UNITS="$RAWUNITS"
      else
        # flux is (exposure-normalized) surface brightness
        FLUX=`cat $FUNFILE | sed '1,/---- .*/d;/^$/,$d' | awk '{print $7}' | tr "\n" " "`
        UNITS="$RAWUNITS/arcsec**2$PERSEC"
      fi
    ;;

    HST)
      # counts to flux conversion value
      PHOTFLAM=`getpar PHOTFLAM < $HDR`
      # normalize by exposure time
      # already part of raw counts,  (see email from Terry M, 9/2/2016)
      # OPTS="-t EXPTIME $OPTS"
      # get counts in regions
      funcnts $OPTS "$1" "$2" "$3" > $FUNFILE
      RAWCNTS=`cat $FUNFILE | sed '1,/---- .*/d;/^$/,$d' | awk '{print $2}'`
      # raw area
      RAWAREA=`cat $FUNFILE | sed '1,/---- .*/d;/^$/,$d' | awk '{print $6}'`
      # raw units (see email from Terry M, 9/2/2016)
      RAWUNITS="electrons/sec"
      if [ x"$PHOTFLAM" != x ]; then
        # convert sci notation to notation that bc understands
        XRAWCNTS=`echo ${RAWCNTS} | sed -e 's/[eE]+*/\\*10\\^/'`
        # convert sci notation to notation that bc understands
        XPHOTFLAM=`echo ${PHOTFLAM} | sed -e 's/[eE]+*/\\*10\\^/'`
        # get flux using arbitrary precision arithmetic, then back to g format
        FLUX=`echo "scale=$BCSCALE;$XRAWCNTS * $XPHOTFLAM" | bc | awk '{printf("%.12g", $1)}' | tr "\n" " "`
        UNITS="ergs/cm**2/sec/Ang"
        # instrument and filter
        FILTER1=`getpar FILTER1 < $HDR`
        # convert from monochromatic flux for this instrument, filter
        if [ x"$INSTRUME $FILTER1" = x"ACS F555W" ]; then
          # conversion factor (see email from Terry M, 9/2/2016)
          XCONV="1572"
          # convert sci notation to notation that bc understands
          XFLUX=`echo ${FLUX} | sed -e 's/[eE]+*/\\*10\\^/'`
          # convert monochromatic flux to flux
          FLUX=`echo "scale=$BCSCALE;$XFLUX * $XCONV" | bc | awk '{printf("%.12g", $1)}' | tr "\n" " "`
          UNITS="ergs/cm**2/sec"
        fi
      else
        # flux is (exposure-normalized) surface brightness
        FLUX=`cat $FUNFILE | sed '1,/---- .*/d;/^$/,$d' | awk '{print $7}' | tr "\n" " "`
        UNITS="$RAWUNITS/arcsec**2"
      fi
    ;;

    SPITZER)
      CHNLNUM=`getpar CHNLNUM < $HDR`
      case $CHNLNUM in
        1) XCONV="6.368 * 10^-15" ;;
	2) XCONV="5.472 * 10^-15" ;;
	3) XCONV="4.653 * 10^-15" ;;
	4) XCONV="5.047 * 10^-15" ;;
        *) XCONV="" ;;
      esac
      OPTS="-t EXPTIME $OPTS"
      # get counts in regions
      funcnts $OPTS "$1" "$2" "$3" > $FUNFILE
      RAWCNTS=`cat $FUNFILE | sed '1,/---- .*/d;/^$/,$d' | awk '{print $2}' | tr "\n" " "`
      # raw area
      RAWAREA=`cat $FUNFILE | sed '1,/---- .*/d;/^$/,$d' | awk '{print $6}' | tr "\n" " "`
      # raw units
      RAWUNITS="Mj/sr"
      if [ x"$XCONV" != x ]; then
        # log the conversion value
        XTRA="channel:\t${CHNLNUM:-NONE}"
        # convert sci notation to notation that bc understands
        XRAWCNTS=`echo ${RAWCNTS} | sed -e 's/[eE]+*/\\*10\\^/'`
        # convert to flux (see: email from Terry M, 8/27/16)
        FLUX=`echo "scale=$BCSCALE; $XRAWCNTS * $XCONV" | bc | awk '{printf("%.12g", $1)}' | tr "\n" " "`
        UNITS="ergs/cm**2/sec"
      else
        # rawcnts and flux are the same
        FLUX="$RAWCNTS"
        UNITS="$RAWUNITS"
      fi
    ;;

    *)
      EXPTIME=`getpar EXPTIME < $HDR`
      EXPOSURE=`getpar EXPOSURE < $HDR`
      if [ x$EXPTIME != x ]; then
        OPTS="$OPTS -t EXPTIME"
        PERSEC="/sec"
      elif [ x$EXPOSURE != x ]; then
        OPTS="$OPTS -t EXPOSURE"
        PERSEC="/sec"
      fi
      # get counts in regions
      funcnts $OPTS "$1" "$2" "$3" > $FUNFILE
      RAWCNTS=`cat $FUNFILE | sed '1,/---- .*/d;/^$/,$d' | awk '{print $2}' | tr "\n" " "`
      # raw area
      RAWAREA=`cat $FUNFILE | sed '1,/---- .*/d;/^$/,$d' | awk '{print $6}' | tr "\n" " "`
      # raw units
      RAWUNITS="photons"
      # rawcnts and flux are the same
      FLUX=`cat $FUNFILE | sed '1,/---- .*/d;/^$/,$d' | awk '{print $7}' | tr "\n" " "`
      UNITS="$RAWUNITS/arcsec**2$PERSEC"
    ;;
esac

# text output: flux and units, among other things

printf "  telescope:\t${TELESCOP:-unknown}\n  instrument:\t${INSTRUME:-unknown}\n  filename:\t$FILENAME\n  flux:      \t$FLUX $UNITS\n  raw counts:\t$RAWCNTS $RAWUNITS\n  raw area:\t$RAWAREA pixels\n  src region:\t${2:-NONE}\n  bkg region:\t${3:-NONE}\n"
if [ x"$XTRA" != x ]; then
  printf "  $XTRA\n"
fi

# all done!
cleanup
exit 0
